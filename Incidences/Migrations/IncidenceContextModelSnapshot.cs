// <auto-generated />
using System;
using Incidences.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Incidences.Migrations
{
    [DbContext(typeof(IncidenceContext))]
    partial class IncidenceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Incidences.Data.Models.Credentials", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Credentials");
                });

            modelBuilder.Entity("Incidences.Data.Models.Notes", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.Property<int>("incidenceId")
                        .HasColumnType("int");

                    b.Property<string>("noteStr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("noteTypeId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("employeeId");

                    b.HasIndex("incidenceId");

                    b.HasIndex("noteTypeId")
                        .IsUnique();

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Incidences.Data.Models.employee", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("dni")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("state")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("surname1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("surname2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("typeId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("typeId")
                        .IsUnique();

                    b.ToTable("employee");
                });

            modelBuilder.Entity("Incidences.Data.Models.employee_range", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("employee_range");
                });

            modelBuilder.Entity("Incidences.Data.Models.incidence", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("close_dateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("open_dateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ownerId")
                        .HasColumnType("int");

                    b.Property<int?>("solverId")
                        .HasColumnType("int");

                    b.Property<int>("state")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("id");

                    b.HasIndex("ownerId")
                        .IsUnique();

                    b.HasIndex("solverId")
                        .IsUnique()
                        .HasFilter("[solverId] IS NOT NULL");

                    b.HasIndex("state")
                        .IsUnique();

                    b.ToTable("incidence");
                });

            modelBuilder.Entity("Incidences.Data.Models.incidence_piece_log", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int>("incidenceId")
                        .HasColumnType("int");

                    b.Property<int>("pieceId")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("id");

                    b.HasIndex("incidenceId");

                    b.HasIndex("pieceId")
                        .IsUnique();

                    b.ToTable("incidence_piece_log");
                });

            modelBuilder.Entity("Incidences.Data.Models.note_type", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("note_type");
                });

            modelBuilder.Entity("Incidences.Data.Models.piece_class", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<byte>("deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("typeId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("typeId")
                        .IsUnique();

                    b.ToTable("piece_class");
                });

            modelBuilder.Entity("Incidences.Data.Models.piece_type", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("piece_type");
                });

            modelBuilder.Entity("Incidences.Data.Models.state", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("state");
                });

            modelBuilder.Entity("Incidences.Data.Models.Notes", b =>
                {
                    b.HasOne("Incidences.Data.Models.employee", "Employee")
                        .WithMany("Notes")
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Incidences.Data.Models.incidence", "Incidence")
                        .WithMany("notes")
                        .HasForeignKey("incidenceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Incidences.Data.Models.note_type", "NoteType")
                        .WithOne("Notes")
                        .HasForeignKey("Incidences.Data.Models.Notes", "noteTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Incidence");

                    b.Navigation("NoteType");
                });

            modelBuilder.Entity("Incidences.Data.Models.employee", b =>
                {
                    b.HasOne("Incidences.Data.Models.Credentials", "Credentials")
                        .WithOne("Employee")
                        .HasForeignKey("Incidences.Data.Models.employee", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Incidences.Data.Models.employee_range", "EmployeeRange")
                        .WithOne("Employee")
                        .HasForeignKey("Incidences.Data.Models.employee", "typeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Credentials");

                    b.Navigation("EmployeeRange");
                });

            modelBuilder.Entity("Incidences.Data.Models.incidence", b =>
                {
                    b.HasOne("Incidences.Data.Models.employee", "owner")
                        .WithOne("emp_inc")
                        .HasForeignKey("Incidences.Data.Models.incidence", "ownerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Incidences.Data.Models.employee", "solver")
                        .WithOne("solv_inc")
                        .HasForeignKey("Incidences.Data.Models.incidence", "solverId");

                    b.HasOne("Incidences.Data.Models.state", "State")
                        .WithOne("Incidence")
                        .HasForeignKey("Incidences.Data.Models.incidence", "state")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("owner");

                    b.Navigation("solver");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Incidences.Data.Models.incidence_piece_log", b =>
                {
                    b.HasOne("Incidences.Data.Models.incidence", null)
                        .WithMany("pieces")
                        .HasForeignKey("incidenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Incidences.Data.Models.piece_class", "Piece")
                        .WithOne("ipl")
                        .HasForeignKey("Incidences.Data.Models.incidence_piece_log", "pieceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Piece");
                });

            modelBuilder.Entity("Incidences.Data.Models.piece_class", b =>
                {
                    b.HasOne("Incidences.Data.Models.piece_type", "PieceType")
                        .WithOne("Piece")
                        .HasForeignKey("Incidences.Data.Models.piece_class", "typeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PieceType");
                });

            modelBuilder.Entity("Incidences.Data.Models.Credentials", b =>
                {
                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Incidences.Data.Models.employee", b =>
                {
                    b.Navigation("emp_inc");

                    b.Navigation("Notes");

                    b.Navigation("solv_inc");
                });

            modelBuilder.Entity("Incidences.Data.Models.employee_range", b =>
                {
                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Incidences.Data.Models.incidence", b =>
                {
                    b.Navigation("notes");

                    b.Navigation("pieces");
                });

            modelBuilder.Entity("Incidences.Data.Models.note_type", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("Incidences.Data.Models.piece_class", b =>
                {
                    b.Navigation("ipl");
                });

            modelBuilder.Entity("Incidences.Data.Models.piece_type", b =>
                {
                    b.Navigation("Piece");
                });

            modelBuilder.Entity("Incidences.Data.Models.state", b =>
                {
                    b.Navigation("Incidence");
                });
#pragma warning restore 612, 618
        }
    }
}
